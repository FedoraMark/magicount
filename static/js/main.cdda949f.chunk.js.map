{"version":3,"sources":["magiCount.module.scss","magiCount.js","serviceWorker.js","index.js"],"names":["module","exports","defaultScores","magiCount","state","default","props","score","atDefault","defaultIndex","indexOf","swipeDirection","isResetting","transitionScore","changeBy","amt","setState","scoreSwipe","dir","newIndex","length","setTimeout","DURATION","this","exitAnim","enterAnim","className","classnames","style","mc_wrapper","normal","warnAt","warning","dangerAt","danger","button","plusButton","onClick","bind","icon","area","scoreArea","onSwipedLeft","onSwipedRight","trackMouse","trackTouch","preventDefaultTouchmoveEvent","animationIn","animationOut","isVisible","duration","easing","toString","split","map","digit","index","key","minusButton","Component","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cdda949f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mc_wrapper\":\"magiCount_mc_wrapper__3_Xdj\",\"button\":\"magiCount_button__44Hr4\",\"area\":\"magiCount_area__VZeCB\",\"icon\":\"magiCount_icon__qVCfU\",\"scoreArea\":\"magiCount_scoreArea__20yf9\",\"score\":\"magiCount_score__t_Ww7\",\"digit\":\"magiCount_digit__2Cw7B\",\"default\":\"magiCount_default__1dXkB\",\"normal\":\"magiCount_normal__3qMrN\",\"warning\":\"magiCount_warning__26DgI\",\"danger\":\"magiCount_danger__2Jsk7\"};","import React, { Component } from \"react\";\nimport classnames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport Animated from \"react-css-animated\";\nimport { /* useSwipeable, */ Swipeable } from \"react-swipeable\";\n\nimport { AiFillPlusCircle, AiFillMinusCircle } from \"react-icons/ai\";\n\nimport \"animate.css\";\nimport style from \"./magiCount.module.scss\";\n\nconst defaultScores = [10, 20, 30, 40, 50];\n\nconst LEFT = \"left\";\nconst RIGHT = \"right\";\n\nconst DURATION = 400;\n\nclass magiCount extends Component {\n  static propTypes = {\n    default: PropTypes.number.isRequired,\n    warnAt: PropTypes.number,\n    dangerAt: PropTypes.number,\n  };\n\n  static defaultProps = {\n    warnAt: 5,\n    dangerAt: 0,\n  };\n\n  state = {\n    default: this.props.default,\n    score: this.props.default,\n    atDefault: true,\n    defaultIndex: defaultScores.indexOf(this.props.default),\n    swipeDirection: \"\",\n    isResetting: true,\n    transitionScore: false,\n  };\n\n  componentDidMount() {\n    this.setState({ isResetting: false });\n  }\n\n  // FUNCITONS\n  changeBy = (amt) => {\n    // use NEGATIVES to decrement\n    this.setState({\n      atDefault: false,\n      score: this.state.score + amt,\n    });\n  };\n\n  scoreSwipe = (dir) => {\n    if (!this.state.atDefault) {\n      this.setState(\n        {\n          isResetting: true,\n          transitionScore: true,\n          atDefault: true,\n        },\n        () => {\n          setTimeout(() => {\n            this.setState(\n              {\n                transitionScore: false,\n                score: this.state.default,\n              },\n              () => {\n                setTimeout(() => {\n                  this.setState({ isResetting: false });\n                }, DURATION / 2);\n              }\n            );\n          }, DURATION / 2);\n        }\n      );\n    } else {\n      let newIndex = 0;\n      if (dir === LEFT) {\n        newIndex = this.state.defaultIndex + 1;\n      } else if (dir === RIGHT) {\n        newIndex = this.state.defaultIndex - 1;\n      }\n\n      if (newIndex < 0) {\n        newIndex = defaultScores.length - 1;\n      } else if (newIndex >= defaultScores.length) {\n        newIndex = 0;\n      }\n\n      this.setState(\n        {\n          swipeDirection: dir,\n          transitionScore: true,\n        },\n        () => {\n          setTimeout(() => {\n            this.setState({\n              transitionScore: false,\n              defaultIndex: newIndex,\n              score: defaultScores[newIndex],\n              default: defaultScores[newIndex],\n            });\n          }, DURATION / 2);\n        }\n      );\n    }\n  };\n\n  // RENDERERS\n  render() {\n    let exitAnim =\n      this.state.swipeDirection === LEFT ? \"fadeOutLeftBig\" : \"fadeOutRightBig\";\n    let enterAnim =\n      this.state.swipeDirection === LEFT ? \"bounceInRight\" : \"bounceInLeft\";\n\n    return (\n      <div\n        className={classnames(\n          style.mc_wrapper,\n          this.state.atDefault ? style.default : style.normal,\n          this.state.score <= this.props.warnAt ? style.warning : \"\",\n          this.state.score <= this.props.dangerAt ? style.danger : \"\"\n        )}\n      >\n        {/* PLUS BUTTON */}\n        <div\n          className={classnames(style.button, style.plusButton)}\n          onClick={this.changeBy.bind(this, 1)}\n        >\n          <div className={style.icon}>\n            <AiFillPlusCircle />\n          </div>\n        </div>\n\n        {/* SCORE AREA */}\n        <Swipeable\n          className={classnames(style.area, style.scoreArea)}\n          onSwipedLeft={this.scoreSwipe.bind(this, LEFT)}\n          onSwipedRight={this.scoreSwipe.bind(this, RIGHT)}\n          trackMouse\n          trackTouch\n          preventDefaultTouchmoveEvent\n        >\n          <Animated\n            className={classnames(style.score)}\n            animationIn={this.state.isResetting ? \"shake\" : enterAnim}\n            animationOut={this.state.isResetting ? \"shake\" : exitAnim}\n            isVisible={!this.state.transitionScore}\n            duration={DURATION}\n            easing={this.state.transitionScore ? \"ease-in\" : \"ease\"}\n          >\n            {this.state.score\n              .toString()\n              .split(\"\")\n              .map((digit, index) => {\n                return (\n                  <span key={index} className={style.digit}>\n                    {digit}\n                  </span>\n                );\n              })}\n          </Animated>\n        </Swipeable>\n\n        {/* MINUS BUTTON */}\n        <div\n          className={classnames(style.button, style.minusButton)}\n          onClick={this.changeBy.bind(this, -1)}\n        >\n          <div className={style.icon}>\n            <AiFillMinusCircle />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default magiCount;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Magicount from './magiCount.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Magicount default={20} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}